1. Where is the assertEquals method defined? What does it do? Can we use assertEquals for more than just int types? (Hint: Consult the API for JUnit)
* The assertEquals method is defined in the JUnit framework, specifically in the Assert class.
* It is used to assert that two values are equal as a condition for passing a test.
* Yes, assertEquals can be used for more than just int types; it is overloaded to handle different types such as float, double, long, Object, and even arrays of these types, comparing values and determining if they are equal within a specified tolerance for the floating-point numbers.

2. Briefly describe what each of the three tests is checking.
* The first test is checking for the findSmallestDiff method with an empty array. It will return -1 in this case.
* The second test is checking for the findSmallestDiff method with the simple array which just has the same duplicated elements.
* The third test is checking for the findSmallestDiff method with normal/complex array which contains 0, positive and negative ints.

3. Why is our unimplemented findSmallestDiff method passing one of the tests?
* Because in the unimplemented method, its default return is 0. This result is same as that of the arr2 case.

4. Why are we failing the third test? How should our method be modified to correct this?
* The failure is due to the fact that the findSmallestDiff method didn't use the absolute value for calculating the difference.
* Use Math.abs() method to solve this problem.

5. What is the appropriate call to assertEquals for your new test (test 4)?
* Test 4 I wrote is to check for for the findSmallestDiff method with just positive integers.

6. Provide one more test (test 5) for the findSmallestDiff method. Briefly describe your test and write the call to assertEquals here.
* int[] arr5 = new arr[]{-3, -5, -33, -9, -11}
* This is to check for the findSmallestDiff method with just negative integers.
* assertEquals(2, DiffUtil.findSmallestDiff(arr5));

7. Briefly describe your unit tests for Assignment 1.
Setup: Initializes common test images smallSquare (2x2) and smallWide (2x3) before each test.

Boundary Conditions: Checks that getPixel retrieves correct pixels at the image edges for smallSquare.

Out of Bounds: Verifies that getPixel throws an exception when requested pixels are outside the image dimensions.

Equality with Different Objects: Ensures the equals method returns false when comparing a GrayscaleImage with an object of a different type.

Equality with Similar Images: Asserts that equals can distinguish between very similar but not identical images.

Average Brightness with Fractional Values: Tests averageBrightness for correctness on an image with fractional pixel values.

Average Brightness with Single Pixel: Checks if averageBrightness correctly returns the value of a single pixel.

No Change on Normalized Image: Ensures that the normalized method doesn't alter an image already at the target average brightness.

Mirror Single Row: Checks that the mirrored method correctly reverses the pixels in a single-row image.

Mirror Single Column: Tests that mirroring a single-column image results in no change.

Cropping to Single Pixel: Confirms that cropping a single-pixel area yields the correct single pixel.

Invalid Cropping Dimensions: Tests that an exception is thrown when attempting to crop with invalid dimensions.

Squarified on Already Square Image: Checks that squarified does not modify an already square image.

Squarified on Taller Image: Verifies that squarified correctly crops a tall image to create a square image.

Get Pixel on Wide Image: Confirms correct pixel retrieval at the corners of a wide image using getPixel.

Normalized on Wide Image: Verifies that normalizing a wide image approximates the target average brightness.

Mirrored Wide Image: Ensures that mirroring a wide image reverses the pixels in each row correctly.

Cropping from Wide Image: Tests that cropping a wide image yields the correct pixels section.

Squarified Wide Image: Checks that squarified correctly transforms a wide image into a square by cropping extra columns.

